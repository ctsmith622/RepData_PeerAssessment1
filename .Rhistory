length(lag(sp.diff$adjusted))
View(lag(sp.diff$adjusted))
View(sp.diff)
View(lag(x = sp.diff$adjusted, k = 1))
View(lag(x = sp.diff$adjusted, k = 2))
View(Lag(x = sp.diff$adjusted, k = 2))
View(Lag(x = sp.diff[,1:4], k = 2))
View(Lag(x = sp.diff[,1], k = 2))
for(i in c(1:(ncol(sp.diff)-1))){
sp.diff[,i] <- Lag(x = sp.diff[,i], k = 1)
}
sp.diff <- sp.diff[2:nrow(sp.diff),]
summary(sp.diff)
pairs.panels(sp.diff)
updown <- c(1:nrow(sp.diff))
updown[which(sp.diff$adjusted>0)] <- 1
updown[which(sp.diff$adjusted<=0)] <- 0
sp.resp <- data.frame(sp.diff[,-ncol(sp.diff)], updown)
summary(sp.resp)
trainsize <- 0.7
ntrain <- round(trainsize * nrow(sp.resp))
trainindex <- sample(x = nrow(sp.resp), ntrain)
train <- sp.resp[trainindex, ]
test <- sp.resp[-trainindex, ]
plot1 <- ggplot(train, aes(x = high, y = low, color=updown)) + geom_point(aes(size=nrow(train))) + ggtitle("Train")
plot2 <- ggplot(test, aes(x = high, y = low, color=updown)) + geom_point(aes(size=nrow(test))) + ggtitle("Test")
grid.arrange(plot1, plot2, nrow=2)
plot1 <- ggplot(train, aes(x = high, y = low, color=updown)) + geom_point(aes(size=nrow(train))) + ggtitle("Train")
plot2 <- ggplot(test, aes(x = high, y = low, color=updown)) + geom_point(aes(size=nrow(test))) + ggtitle("Test")
grid.arrange(plot1, plot2, nrow=2)
predictors <- as.matrix(cbind(train[,1:3], train[,5]))
response <- as.matrix(train[,7])
View(sp.resp)
predictors <- as.matrix(cbind(train[,1:5]))
response <- as.matrix(train[,ncol(train)])
test.predictors <- as.matrix(cbind(test[,1:5]))
test.response <- as.matrix(test[,cnol(train)])
svm <- ksvm(predictors, response, type="C-svc", kernel= 'rbf', C=1)
svm
predictions <- predict(svm, test.predictors)
pred.data <- list(predictions = predictions, labels = test.response)
test.response <- as.matrix(test[,cnol(train)])
test.response <- as.matrix(test[,ncol(train)])
test.predictors <- as.matrix(cbind(test[,1:5]))
test.response <- as.matrix(test[,ncol(train)])
svm <- ksvm(predictors, response, type="C-svc", kernel= 'rbf', C=1)
svm
predictions <- predict(svm, test.predictors)
pred.data <- list(predictions = predictions, labels = test.response)
pred <- prediction(pred.data$predictions, pred.data$labels)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
perf1 <- performance(pred, "prec", "rec")
plot(perf1)
table(predictions, test.response)
svm <- ksvm(predictors, response, type="C-svc", kernel= 'rbf', C=100)
svm
predictions <- predict(svm, test.predictors)
pred.data <- list(predictions = predictions, labels = test.response)
pred <- prediction(pred.data$predictions, pred.data$labels)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
table(predictions, test.response)
sum(predictions==test.response)/length(test.response)
plotdata <- as.data.frame(cbind(test.predictors, predictions, test.response))
plot1 <- ggplot(plotdata, aes(x = high, y = low, color=predictions)) + geom_point(aes(size=nrow(plotdata))) +  ggtitle("Predicted")
plot2 <- ggplot(plotdata, aes(x = test.response, y = low, color=predictions)) + geom_point(aes(size=nrow(plotdata))) +  ggtitle("Actual")
grid.arrange(plot1, plot2, nrow=2)
View(sp.resp)
lm1 <- glm(formula = updown~high+low+volume+open+close, data=train, family=binomial("logit"))
summary(lm1)
lm1 <- step(lm1)
summary(lm1)
predictors <- cbind(train[,c(1:5)])
response <-  train[,ncol(train)]
test.predictors <- cbind(test[,c(1:5)])
test.response <- test[,ncol(test)]
predictions <- predict.glm(lm1, test.predictors, type="response")
summary(predictions)
roc <- roc(response = test.response, predictor = predictions)
plot.roc(roc)
predictions.svm <- predict(svm, test.predictors)
predictions.svm
predictions.glm
predictions.glm <- predict.glm(lm1, test.predictors, type="response")
predictions.glm
library(randomForest)
rf <- randomForest(x = predictors, y = response,importance=T,  ntree = 500, proximity=TRUE,oob.prox=TRUE)
rf
plot( predict(rf), response)
varImpPlot(rf)
predictions.rf <- predict(object = rf, newdata = test.predictors)
rf.predictions <- c(1:length(test.response))
threshold = 0.5
rf.predictions[which(predictions>threshold)] <- 1
rf.predictions[which(predictions<=threshold)] <- 0
sum(rf.predictions==test.response)/length(test.response)
final.df <- cbind(rf.predictions, glm.predictions, svm.predictions)
final.df <- cbind(predictions.rf, predictions.glm, predictions.svm)
lm.final <- glm(formula = test.response~., data=final.df, family=binomial("logit"))
final.df <- data.frame(rf = predictions.rf, glm= predictions.glm, svm = predictions.svm, response= test.response)
lm.final <- glm(formula = test.response~., data=final.df, family=binomial("logit"))
summary(lm.final)
View(final.df)
lm.final <- glm(formula = response~., data=final.df, family=binomial("logit"))
summary(lm.final)
step(lm.final)
summary(step(lm.final))
require(compiler)
enableJIT(3)
library(iplots)
install.packages("iplots")
library(iplots)
attach(mtcars)
cylinders <- factor(cyl)
gears <- factor(gear)
transmission <- factor(am)
ihist(mpg)
ibar(gears)
iplot(mpg, wt)
ibox(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
ipcp(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
imosaic(transmission, cylinders)
detach(mtcars)
attach(mtcars)
cylinders <- factor(cyl)
gears <- factor(gear)
transmission <- factor(am)
ihist(mpg)
ibar(gears)
iplot(mpg, wt)
ibox(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
ipcp(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
imosaic(transmission, cylinders)
detach(mtcars)
version()
R.Version()
install.packages("clues")
graphstats <- read.csv("~/R Projects/Random/graphstats.csv")
View(graphstats)
graphstats <- graphstats[,c(-1,-13)]
View(graphstats)
library(clues)
maxclusters <- 16
ch_vals <- c(2:maxclusters)
maxclusters <- 16
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals[i-1] <- get_CH(y = graphstats, mem = clusters$cluster)
}
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals[i-1] <- get_CH(y = graphstats, mem = clusters$cluster)
print(paste("success", i , sep = ""))
}
clusters$cluster
clusters$cluster
clusters <- kmeans(graphstats, centers = 2)
clusters$cluster
ch <- get_CH(y = graphstats, mem = clusters$cluster, disMethod = "Euclidean")
ch <- get_CH(y = as.matrix(graphstats), mem = clusters$cluster, disMethod = "Euclidean")
maxclusters <- 16
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(graphstats), mem = clusters$cluster)
print(paste("success", i , sep = ""))
}
plot(ch_vals)
lines(ch_vals)
maxclusters <- 16
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(graphstats), mem = clusters$cluster)
print(paste("success", i , sep = ""))
}
plot(ch_vals)
lines(ch_vals)
graphstats <- read.csv("C:/Users/agilex01/Desktop/graphstats.csv")
View(graphstats)
library(clues)
maxclusters <- 20
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(graphstats), mem = clusters$cluster)
print(paste("success", i , sep = " "))
}
plot(ch_vals)
lines(ch_vals)
data <- read.csv("C:/Users/agilex01/Desktop/data.csv")
View(data)
data[,1]
data <- data[,-1]
library(clues)
maxclusters <- 20
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(graphstats, centers = i)
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(data, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(data), mem = clusters$cluster)
print(paste("success", i , sep = " "))
}
plot(ch_vals)
lines(ch_vals)
maxclusters <- 40
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(data, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(data), mem = clusters$cluster)
print(paste("success", i , sep = " "))
}
plot(ch_vals)
lines(ch_vals)
maxclusters <- 100
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(data, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(data), mem = clusters$cluster)
print(paste("success", i , sep = " "))
}
plot(ch_vals)
lines(ch_vals)
maxclusters <- 300
ch_vals <- c(2:maxclusters)
for(i in 2:maxclusters){
clusters <- kmeans(data, centers = i)
ch_vals[i-1] <- get_CH(y = as.matrix(data), mem = clusters$cluster)
print(paste("success", i , sep = " "))
}
plot(ch_vals)
lines(ch_vals)
version
Version()
version()
R.version
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("Zelig")
library(Zelig)
data(turnout)
z.out <- zelig(vote ~ race + educate, model = "logit", data = turnout)
x.low <- setx(z.out, educate = 12)
x.high <- setx(z.out, educate = 16)
s.out <- sim(z.out, x = x.low, x1 = x.high)
summary(s.out) # Numerical summary.
x.high <- setx(z.out, educate = 20)
s.out <- sim(z.out, x = x.low, x1 = x.high)
summary(s.out) # Numerical summary.
z.out <- zelig(vote ~ race + educate, model = "logit", data = turnout)
x.low <- setx(z.out, racewhite = 0)
View(turnout)
View(turnout)
x.low <- setx(z.out, race = "white")
x.high <- setx(z.out, race = "others")
s.out <- sim(z.out, x = x.low, x1 = x.high)
summary(s.out) # Numerical summary.
data(turnout)
z.out <- zelig(vote ~ race + educate, model = "logit", data = turnout)
x.out <- setx(z.out, fn = NULL)
s.out <- sim(z.out, x = x.out)
summary(s.out)
0.43*4
1.72/98
install.packages("xlsxjars")
library(xlsx)
install.packages("xlsx")
library(xlsx)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "data.xlsx")
read.xlsx(file = "data.xlsx", sheetIndex = 1,  rowIndex = c(18:23), colIndex = c(7:15))
read.xlsx(file = "data.xlsx")
read.xlsx(file = "data.xlsx", sheetIndex = 1)
library(xml)
library(XML)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile = "data.xml")
xmlParse("data.xml")
dat <- xmlParse("data.xml")
dat <- xmlToDataFrame(dat)
View(dat)
dat <- xmlParse("data.xml")
r <- xmlRoot(dat)
xmlName(r)
r[[1]]
xmlName(r[[1]])
xmlSize(r)
xmlName(r[[1]][[1]])
xmlName(r[[1]][[1]][[1]])
r
names(r)
xmlName(r)
names(r[[1]])
names(r[[1]][[1]])
names(r[[2]][[1]])
mlSApply(r[[1]][[1]], xmlValue)
xmlSApply(r[[1]][[1]], xmlValue)
xmlSApply(r[[1]], xmlValue)
xmlSApply(r[[1]], function(x) xmlSApply(x, xmlValue))
nodes = getNodeSet(r[[1]], "//zipcode")
nodes
nodes[@zipcode ='21231']
xmlToDataFrame(nodes)
zips <- xmlToDataFrame(nodes)
length(which(zips == "21231"))
100000/300000000
300000000/100000
load("~/Coursera/Class_3/.RData")
summary(tidy_means_final$activity)
head(tidy_means_final$activity)
head(tidy_means_final)
names(tidy_means_final)
summary(tidy_means_final$subject)
tidy_means_final$subject
unique(tidy_means_final$activity)
paste("Interval #" , intervals[which.max(interval_means)], sep = "")
setwd("~/Coursera/Class_5/RepData_PeerAssessment1")
load("~/Coursera/Class_5/RepData_PeerAssessment1/.RData")
mean(act$steps)
median(act$steps)
interval_means <- tapply(act$steps, INDEX = act$interval, FUN = mean)
intervals <- sort(unique(act$interval))
plot(intervals, interval_means, type = "l", main = "Mean # Steps Taken vs 5-minute Interval", ylab = "Mean # Steps Taken", xlab = "5-minute Interval ID")
paste("Interval #" , intervals[which.max(interval_means)], sep = "")
max_mean_index <- which.max(interval_means)
paste("Interval #" , intervals[max_mean_index], sep = "")
act <- read.csv("activity/activity.csv")
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
mean(act$steps)
median(act$steps)
mean(act$steps, na.rm = T)
median(act$steps, na.rm = T)
interval_means <- tapply(act$steps, INDEX = act$interval, FUN = mean)
intervals <- sort(unique(act$interval))
plot(intervals, interval_means, type = "l", main = "Mean # Steps Taken vs 5-minute Interval", ylab = "Mean # Steps Taken", xlab = "5-minute Interval ID")
interval_means <- tapply(act$steps, INDEX = act$interval, FUN = mean, ... = na.rm = T)
interval_means <- tapply(act$steps, INDEX = act$interval, FUN = mean, na.rm = T)
act <- read.csv("activity/activity.csv")
act <- na.omit(act)
act_na <- read.csv("activity/activity.csv")
act <- na.omit(act_na)
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
mean(act$steps)
median(act$steps)
interval_means <- tapply(act$steps, INDEX = act$interval, FUN = mean)
intervals <- sort(unique(act$interval))
plot(intervals, interval_means, type = "l", main = "Mean # Steps Taken vs 5-minute Interval", ylab = "Mean # Steps Taken", xlab = "5-minute Interval ID")
max_mean_index <- which.max(interval_means)
paste("Interval #" , intervals[max_mean_index], sep = "")
summary(act_na)
length(which(is.na(act_na$steps)))
length(which(is.na(act_na$date)))
length(which(is.na(act_na$interval)))
complete.cases(act_na)
length(which(!complete.cases(act_na)))
num_na_rows <- length(which(!complete.cases(act_na)))
num_na_rows
med_step <- median(act$steps)
med_step
med_step <- mean(act$steps)
med_step
rm(med_step)
act_na$steps[na_rows] <- mean_step
mean_step <- mean(act$steps)
na_rows <- which(!complete.cases(act_na))
act_na$steps[na_rows] <- mean_step
summary(act_na)
new_num_na_rows <- length(which(!complete.cases(act_na)))
new_num_na_rows <- length(which(!complete.cases(act_na)))
new_num_na_rows
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
par(mfrow=c(1,2))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps")
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,10000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,11000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,13000))
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,13000))
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000))
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000))
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000))
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000), breaks = 20)
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000), breaks = 30)
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000), breaks = 30)
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000), breaks = 30)
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000), breaks = 30)
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000), breaks = 30)
hist(act$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000))
hist(act_na$steps, main= "Histogram of # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000))
par(mfrow=c(1,2))
hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000))
hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000))
par(mfrow=c(1,1))
old_mean <- mean(act$steps)
old_mean
new_mean <- mean(act_na$step)
new_mean
old_median <- median(act$steps)
new_median <- median(act_na$steps)
old_mean ; new_mean
old_median ; new_median
par(mfrow=c(1,2))
hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0,15000), freq = F)
hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0,15000), freq = F)
par(mfrow=c(1,2))
hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0,1), freq = F)
hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0,1), freq = F)
par(mfrow=c(1,2))
hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0,.1), freq = F)
hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0,.1), freq = F)
par(mfrow=c(1,2))
hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0, 0.02), freq = F)
hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0, 0.02), freq = F)
a <- hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0, 0.02), freq = F)
a
b <- hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0, 0.02), freq = F)
b
a
plot(hist_old, hist_new)
rm(a,b)
par(mfrow=c(1,2))
hist_old <- hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0, 0.02), freq = F)
hist_new <- hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0, 0.02), freq = F)
par(mfrow=c(1,2))
hist_old <- hist(act$steps, main= "OLD # Steps Taken per Day", xlab = "# Steps", ylim = c(0, 0.02), freq = F)
hist_new <- hist(act_na$steps, main= "NEW # Steps Taken per Day", xlab = "# Steps", ylim= c(0, 0.02), freq = F)
par(mfrow=c(1,1))
hist_old$density
hist_new$density
cbind(hist_old$density, hist_new$density)
data.frame(OLD = hist_old$density, NEW = hist_new$density)
data.frame(OLD_DENSITIES= hist_old$density, NEW_DENSITIES = hist_new$density)
View(act_na)
weekdays(act_na$data[1])
library(lubridate)
day(act_na$date[1])
day(act_na$date[2])
day(act_na$date[200])
day(act_na$date[2000])
day(act_na$date[4000])
weekdays(act_na$date[4000])
week(act_na$date[4000])
weekday(act_na$date[4000])
?lubridate
wday(act_na$date[4000])
!wday(act_na$date) %in% c(1,7)
act_na$weekday <- !wday(act_na$date) %in% c(1,7)
library(lattice)
?lattice
xyplot(act_na$steps ~ act_na$interval | act_na$weekday)
interval_means_wkday <- tapply(act_na$steps, INDEX = c(act_na$interval, act_na$weekday), FUN = mean)
act_na$interval
act_na$weekday
length(acts_na$interval)
length(act_na$interval)
length(act_na$weekday)
length(act_na$steps)
act_na$weekday <- !wday(act_na$date) %in% c(1,7)
interval_means_wkday <- tapply(act_na$steps, INDEX = c(act_na$interval, act_na$weekday), FUN = mean)
list(act_na$interval, act_na$weekday)
interval_means_wkday <- tapply(act_na$steps, INDEX = list(act_na$interval, act_na$weekday), FUN = mean)
interval_means_wkday
rownames(interval_means_wkday)
interval_means_wkday
xyplot(interval_means_wkday)
library(tidyr)
gather(interval_means_wkday, key = "day_type", value = "steps")
interval_means_wkday <- as.data.frame(tapply(act_na$steps, INDEX = list(act_na$interval, act_na$weekday), FUN = mean))
interval_means_wkday
gather(interval_means_wkday, key = "day_type", value = "steps")
gather(interval_means_wkday, key = "weekday", value = "steps")
tidy_means_wkdy <- gather(interval_means_wkday, key = "weekday", value = "steps")
as.numeric(rownames(interval_means_wkday))
interval_means_wkday$interval <- as.numeric(rownames(interval_means_wkday))
head(interval_means_wkday)
interval_means_wkday$interval <- as.numeric(rownames(interval_means_wkday))
tidy_means_wkdy <- gather(interval_means_wkday, key = "weekday", value = "steps", -c"interval")
tidy_means_wkdy <- gather(interval_means_wkday, key = "weekday", value = "steps", -"interval")
tidy_means_wkdy <- gather(interval_means_wkday, key = "weekday", value = "steps", -interval)
xyplot(steps ~ interval |  weekday, data= tidy_means_wkdy)
?lattice
xyplot(steps ~ interval |  weekday, data= tidy_means_wkdy, type = "l")
xyplot(steps ~ interval |  weekday, data= tidy_means_wkdy, type = "l", groups = c("weekend", "weekday"))
xyplot(steps ~ interval |  weekday, data= tidy_means_wkdy, type = "l")
tidy_means_wkdy$weekday[which(tidy_means_wkdy$weekday)] <- "Weekday"
tidy_means_wkdy$weekday[which(!tidy_means_wkdy$weekday)] <- "Weekend"
tidy_means_wkdy$weekday[which(tidy_means_wkdy$weekday)]
tidy_means_wkdy$weekday
tidy_means_wkdy$weekday <- as.logical(tidy_means_wkdy$weekday)
tidy_means_wkdy$weekday[which(tidy_means_wkdy$weekday)] <- "Weekday"
tidy_means_wkdy$weekday[which(!tidy_means_wkdy$weekday)] <- "Weekend"
tidy_means_wkdy <- gather(interval_means_wkday, key = "weekday", value = "steps", -interval)
tidy_means_wkdy$weekday <- as.logical(tidy_means_wkdy$weekday)
weekday_indices <- which(tidy_means_wkdy$weekday)
weekday_indices <- which(tidy_means_wkdy$weekday)
tidy_means_wkdy$weekday[weekday_indices] <- "Weekday"
tidy_means_wkdy$weekday[-weekday_indices] <- "Weekend"
xyplot(steps ~ interval |  weekday, data= tidy_means_wkdy, type = "l")
knit2html()
library(knitr)
knit2html()
